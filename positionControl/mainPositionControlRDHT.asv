%{
ROB 542: Actuator Dyamics, Assignment 5 & 6

Rolling Diaphragm Hydrostatic Transmission simulation

Main code
Last modified by Hannah Kolano 5/20/21
%}

clear all

%% Set up parameters

% cylinders: 25bar max
% Direct drive motor peak torque 19.6 Nm

% Geometry
p.r = 23.9/1000; % radius of the pulley, in mm (from Design and Experiment...)
p.A1 = (0.024/2)^2*pi; % Area of input piston, in m^2 (this is a little under a square inch)
p.A2 = (0.024/2)^2*pi; % Area of ouput piston, in m^2
p.a = (.006/2)^2*pi; % Area of the tube, in m^2
p.strokelim = 56.8/2/1000; % Stroke length limit (either way from 0)
freq=1;
% Masses
mp = 0.05;  % Pulley mass
p.Ip = 0.5*mp*p.r^2;   % pulley inertia
p.mpd = 0.05;  % Piston and diaphragm mass, kg
p.mw = 0.1;   % Total mass of the water
p.mw2 = p.mw/2;   % Mass of half the water

% Stiffnesses
p.kp = 2014000; % Stiffness of the belt N/m 
p.kh = 1573;   % Stiffness of the hose N/m of y1

p.h=0;

% Damping
p.bp = 200;     % Damping of the belt
p.bf = 2.137;     % Viscous friction N/(m/s) of y1

%% Simulate the system
X0 = [0 0 0 0 0 0 0 0];
p.dist_amp = 4500; % Amplitude of disturbance: ~30 degrees
p.dist_freq = 5; % Frequency of disturbance, Hz
p.freq=1
traj_fun = @(t) disTrajPosition(p.dist_amp, p.dist_freq, t);% External disturbance
% Set up controller
c.Kp = 10000;
c.Kd = 100;
tau_des = .1;

% set up controller
% ctlr_fun = @(t,t_last,X,X_last) ctlrRDHTforce(t,t_last,X,X_last,c,p,tau_des);
ctlr_fun = @(t,X,freq) ctlrRDHTPosition(t,X,freq);

[t_vec, X_vec] = simPositionControlRDHT(X0,p,c,freq, traj_fun, ctlr_fun);
dist= .5*cos(5*2*pi.*t_vec);
dist= .5*cos(5*2*pi.*t_vec);
%% Plotting
% % %% Plotting
% figure
% % plot(t_vec, X_vec(1,:))
% plot(t_vec, X_vec(:,1));
% hold on
% plot(t_vec, X_vec(:,7))
% % plot(t_vec, 5*sin(t_vec))
% legend('input pulley angle', 'output pulley angle')
% xlabel('Time (s)')
% ylabel('Radians')
% title('Position control')
% 
% % figure
% % plot(t_vec, X_vec(:,2));
% % legend('D Theta 1')
% 
% figure
% plot(t_vec, X_vec(:,3))
% hold on
% plot(t_vec, X_vec(:,5))
% legend('input piston displacement', 'output piston displacement')
% xlabel('Time (s)')
% ylabel('Displacement (m)')
% title(' Position control')
% %
% % figure
% % plot(t_vec, X_vec(:,4))
% % legend('dx1')
% 
% figure
% 
% plot(t_vec, X_vec(:,7)-X_vec(:,1))
% xlabel('Time (s)')
% ylabel('Position error (rad)')
% title('Input-Output shaft')
% title('Position control')
%  amp=.5;
%  freq=1;
%  
% figure
% dy = amp*freq*2*pi*cos(freq*2*pi.*t_vec);
% plot(t_vec, dy)
% hold on
% plot(t_vec, X_vec(:,8))
% xlabel('Time (s)')
% ylabel('Velocity (rad/s)')
% legend('Desired velocity', 'Actual velocity')
% title('Position control')
% 
% figure
% y = amp*sin(freq*2*pi.*t_vec);
% plot(t_vec, y)
% hold on
% plot(t_vec, X_vec(:,7))
% xlabel('Time (s)')
% ylabel('Position (rad)')
% legend('Desired position', 'Actual position')
% title('Position control')
% 
% 
exportVideo = false;
playbackRate = 1;
RDHTAnimationPosCon(p,t_vec,X_vec,exportVideo,playbackRate);

% for i=1:100
%     freq=i;
%      amp=.5;
%     [t_vec, X_vec] = simPositionControlRDHT(X0,p,c,freq,traj_fun, ctlr_fun);
%     y = amp*sin(freq*2*pi.*t_vec);
%     fq(i)=i;
%     d = amp*cos(5*2*pi.*t_vec);
%    output_amp = peak2peak(X_vec(:,7));
%    input_amp = peak2peak(y);
%    ratio(i) =output_amp/ input_amp;
%     rms_value(i)=rms(X_vec(:,7)-y);
%     rms_Distvalue(i)=rms(X_vec(:,7)-d);
%     
%    
% end
% figure
% plot(fq,ratio,'md')
% xlabel('Frequency (Hz)')
% ylabel('Amplitude Ratio')
% title('Position Control frequency plot')
% ylim([-2 5])

% figure
% plot(fq,rms_value,'md')
% xlabel('Frequency (Hz)')
% ylabel('RMS ')
% title('Position Control frequency plot')
% ylim([0 1])
% 
% figure
% plot(fq,rms_Distvalue,'md')
% xlabel('Frequency (Hz)')
% ylabel('RMS Disturbance ')
% title('Position Control frequency plot')
% ylim([0 1])
% 
% figure
% semilogx(fq,rms_value)
% xlabel('Frequency (Hz)')
% ylabel('RMS )')
% title('Position Control frequency plot')